/**
 * Type of local change.
 */
export var UpdateType;
(function (UpdateType) {
    /** Insert or replace existing row. All non-null columns are included in the data. Generated by INSERT statements. */
    UpdateType["PUT"] = "PUT";
    /** Update existing row. Contains the id, and value of each changed column. Generated by UPDATE statements. */
    UpdateType["PATCH"] = "PATCH";
    /** Delete existing row. Contains the id. Generated by DELETE statements. */
    UpdateType["DELETE"] = "DELETE";
})(UpdateType || (UpdateType = {}));
/**
 * A single client-side change.
 */
export class CrudEntry {
    /**
     * Auto-incrementing client-side id.
     */
    clientId;
    /**
     * ID of the changed row.
     */
    id;
    /**
     * Type of change.
     */
    op;
    /**
     * Data associated with the change.
     */
    opData;
    /**
     * Table that contained the change.
     */
    table;
    /**
     * Auto-incrementing transaction id. This is the same for all operations within the same transaction.
     */
    transactionId;
    static fromRow(dbRow) {
        const data = JSON.parse(dbRow.data);
        return new CrudEntry(parseInt(dbRow.id), data.op, data.type, data.id, dbRow.tx_id, data.data);
    }
    constructor(clientId, op, table, id, transactionId, opData) {
        this.clientId = clientId;
        this.id = id;
        this.op = op;
        this.opData = opData;
        this.table = table;
        this.transactionId = transactionId;
    }
    /**
     * Converts the change to JSON format.
     */
    toJSON() {
        return {
            op_id: this.clientId,
            op: this.op,
            type: this.table,
            id: this.id,
            tx_id: this.transactionId,
            data: this.opData
        };
    }
    equals(entry) {
        return JSON.stringify(this.toComparisonArray()) == JSON.stringify(entry.toComparisonArray());
    }
    /**
     * The hash code for this object.
     * @deprecated This should not be necessary in the JS SDK.
     * Use the  @see CrudEntry#equals method instead.
     * TODO remove in the next major release.
     */
    hashCode() {
        return JSON.stringify(this.toComparisonArray());
    }
    /**
     * Generates an array for use in deep comparison operations
     */
    toComparisonArray() {
        return [this.transactionId, this.clientId, this.op, this.table, this.id, this.opData];
    }
}
//# sourceMappingURL=CrudEntry.js.map