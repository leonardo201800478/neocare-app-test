{"version":3,"names":["NativeModules","setupOpen","setupTypeORMDriver","global","__QuickSQLiteProxy","QuickSQLiteModule","QuickSQLite","Error","nativeCallSyncHook","install","result","proxy","open","typeORMDriver"],"sources":["index.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport { ISQLite } from './types';\nimport { setupOpen } from './setup-open';\nimport { setupTypeORMDriver } from './type-orm';\n\nexport * from './types';\n\ndeclare global {\n  function nativeCallSyncHook(): unknown;\n  var __QuickSQLiteProxy: object | undefined;\n}\n\nif (global.__QuickSQLiteProxy == null) {\n  const QuickSQLiteModule = NativeModules.QuickSQLite;\n\n  if (QuickSQLiteModule == null) {\n    throw new Error('Base quick-sqlite module not found. Maybe try rebuilding the app.');\n  }\n\n  // Check if we are running on-device (JSI)\n  if (global.nativeCallSyncHook == null || QuickSQLiteModule.install == null) {\n    throw new Error(\n      'Failed to install react-native-quick-sqlite: React Native is not running on-device. QuickSQLite can only be used when synchronous method invocations (JSI) are possible. If you are using a remote debugger (e.g. Chrome), switch to an on-device debugger (e.g. Flipper) instead.'\n    );\n  }\n\n  // Call the synchronous blocking install() function\n  const result = QuickSQLiteModule.install();\n  if (result !== true) {\n    throw new Error(\n      `Failed to install react-native-quick-sqlite: The native QuickSQLite Module could not be installed! Looks like something went wrong when installing JSI bindings: ${result}`\n    );\n  }\n\n  // Check again if the constructor now exists. If not, throw an error.\n  if (global.__QuickSQLiteProxy == null) {\n    throw new Error(\n      'Failed to install react-native-quick-sqlite, the native initializer function does not exist. Are you trying to use QuickSQLite from different JS Runtimes?'\n    );\n  }\n}\n\nconst proxy = global.__QuickSQLiteProxy;\nexport const QuickSQLite = proxy as ISQLite;\n\nexport const { open } = setupOpen(QuickSQLite);\n\nexport const typeORMDriver = setupTypeORMDriver(open);\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAE5C,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,kBAAkB,QAAQ,YAAY;AAE/C,cAAc,SAAS;AAOvB,IAAIC,MAAM,CAACC,kBAAkB,IAAI,IAAI,EAAE;EACrC,MAAMC,iBAAiB,GAAGL,aAAa,CAACM,WAAW;EAEnD,IAAID,iBAAiB,IAAI,IAAI,EAAE;IAC7B,MAAM,IAAIE,KAAK,CAAC,mEAAmE,CAAC;EACtF;;EAEA;EACA,IAAIJ,MAAM,CAACK,kBAAkB,IAAI,IAAI,IAAIH,iBAAiB,CAACI,OAAO,IAAI,IAAI,EAAE;IAC1E,MAAM,IAAIF,KAAK,CACb,oRACF,CAAC;EACH;;EAEA;EACA,MAAMG,MAAM,GAAGL,iBAAiB,CAACI,OAAO,CAAC,CAAC;EAC1C,IAAIC,MAAM,KAAK,IAAI,EAAE;IACnB,MAAM,IAAIH,KAAK,CACZ,oKAAmKG,MAAO,EAC7K,CAAC;EACH;;EAEA;EACA,IAAIP,MAAM,CAACC,kBAAkB,IAAI,IAAI,EAAE;IACrC,MAAM,IAAIG,KAAK,CACb,4JACF,CAAC;EACH;AACF;AAEA,MAAMI,KAAK,GAAGR,MAAM,CAACC,kBAAkB;AACvC,OAAO,MAAME,WAAW,GAAGK,KAAgB;AAE3C,OAAO,MAAM;EAAEC;AAAK,CAAC,GAAGX,SAAS,CAACK,WAAW,CAAC;AAE9C,OAAO,MAAMO,aAAa,GAAGX,kBAAkB,CAACU,IAAI,CAAC","ignoreList":[]}