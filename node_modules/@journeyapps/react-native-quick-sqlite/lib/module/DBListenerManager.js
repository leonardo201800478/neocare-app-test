function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { registerTransactionHook, registerUpdateHook } from './table-updates';
import { TransactionEvent } from './types';
import { BaseObserver } from './utils/BaseObserver';
export class DBListenerManager extends BaseObserver {}
export class DBListenerManagerInternal extends DBListenerManager {
  constructor(options) {
    super();
    this.options = options;
    _defineProperty(this, "updateBuffer", void 0);
    this.updateBuffer = [];
    registerUpdateHook(this.options.dbName, update => this.handleTableUpdates(update));
    registerTransactionHook(this.options.dbName, eventType => {
      switch (eventType) {
        /**
         * COMMIT hooks occur before the commit is completed. This leads to race conditions.
         * Only use the rollback event to clear updates.
         */
        case TransactionEvent.ROLLBACK:
          this.transactionReverted();
          break;
      }
      this.iterateListeners(l => {
        var _l$writeTransaction;
        return (_l$writeTransaction = l.writeTransaction) === null || _l$writeTransaction === void 0 ? void 0 : _l$writeTransaction.call(l, {
          type: eventType
        });
      });
    });
  }
  flushUpdates() {
    if (!this.updateBuffer.length) {
      return;
    }
    const groupedUpdates = this.updateBuffer.reduce((grouping, update) => {
      const {
        table
      } = update;
      const updateGroup = grouping[table] || (grouping[table] = []);
      updateGroup.push(update);
      return grouping;
    }, {});
    const batchedUpdate = {
      groupedUpdates,
      rawUpdates: this.updateBuffer,
      tables: Object.keys(groupedUpdates)
    };
    this.updateBuffer = [];
    this.iterateListeners(l => {
      var _l$tablesUpdated;
      return (_l$tablesUpdated = l.tablesUpdated) === null || _l$tablesUpdated === void 0 ? void 0 : _l$tablesUpdated.call(l, batchedUpdate);
    });
  }
  transactionReverted() {
    // clear updates
    this.updateBuffer = [];
  }
  handleTableUpdates(notification) {
    // Fire updates for any change
    this.iterateListeners(l => {
      var _l$rawTableChange;
      return (_l$rawTableChange = l.rawTableChange) === null || _l$rawTableChange === void 0 ? void 0 : _l$rawTableChange.call(l, {
        ...notification
      });
    });

    // Queue changes until they are flushed
    this.updateBuffer.push(notification);
  }
}
//# sourceMappingURL=DBListenerManager.js.map