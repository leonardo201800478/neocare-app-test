{"version":3,"names":["registerTransactionHook","registerUpdateHook","TransactionEvent","BaseObserver","DBListenerManager","DBListenerManagerInternal","constructor","options","_defineProperty","updateBuffer","dbName","update","handleTableUpdates","eventType","ROLLBACK","transactionReverted","iterateListeners","l","_l$writeTransaction","writeTransaction","call","type","flushUpdates","length","groupedUpdates","reduce","grouping","table","updateGroup","push","batchedUpdate","rawUpdates","tables","Object","keys","_l$tablesUpdated","tablesUpdated","notification","_l$rawTableChange","rawTableChange"],"sources":["DBListenerManager.ts"],"sourcesContent":["import { registerTransactionHook, registerUpdateHook } from './table-updates';\nimport {\n  BatchedUpdateCallback,\n  BatchedUpdateNotification,\n  TransactionEvent,\n  UpdateCallback,\n  UpdateNotification\n} from './types';\nimport { BaseListener, BaseObserver } from './utils/BaseObserver';\n\nexport interface DBListenerManagerOptions {\n  dbName: string;\n}\n\nexport interface WriteTransactionEvent {\n  type: TransactionEvent;\n}\n\nexport interface DBListener extends BaseListener {\n  /**\n   * Register a listener to be fired for any table change.\n   * Changes inside write locks and transactions are reported immediately.\n   */\n  rawTableChange: UpdateCallback;\n\n  /**\n   * Register a listener for when table changes are persisted\n   * into the DB. Changes during write transactions which are\n   * rolled back are not reported.\n   * Any changes during write locks are buffered and reported\n   * after transaction commit and lock release.\n   * Table changes are reported individually for now in order to maintain\n   * API compatibility. These can be batched in future.\n   */\n  tablesUpdated: BatchedUpdateCallback;\n\n  /**\n   * Listener event triggered whenever a write transaction\n   * is started, committed or rolled back.\n   */\n  writeTransaction: (event: WriteTransactionEvent) => void;\n}\n\nexport class DBListenerManager extends BaseObserver<DBListener> {}\n\nexport class DBListenerManagerInternal extends DBListenerManager {\n  private updateBuffer: UpdateNotification[];\n\n  constructor(protected options: DBListenerManagerOptions) {\n    super();\n    this.updateBuffer = [];\n    registerUpdateHook(this.options.dbName, (update) => this.handleTableUpdates(update));\n    registerTransactionHook(this.options.dbName, (eventType) => {\n      switch (eventType) {\n        /**\n         * COMMIT hooks occur before the commit is completed. This leads to race conditions.\n         * Only use the rollback event to clear updates.\n         */\n        case TransactionEvent.ROLLBACK:\n          this.transactionReverted();\n          break;\n      }\n\n      this.iterateListeners((l) =>\n        l.writeTransaction?.({\n          type: eventType\n        })\n      );\n    });\n  }\n\n  flushUpdates() {\n    if (!this.updateBuffer.length) {\n      return;\n    }\n\n    const groupedUpdates = this.updateBuffer.reduce((grouping: Record<string, UpdateNotification[]>, update) => {\n      const { table } = update;\n      const updateGroup = grouping[table] || (grouping[table] = []);\n      updateGroup.push(update);\n      return grouping;\n    }, {});\n\n    const batchedUpdate: BatchedUpdateNotification = {\n      groupedUpdates,\n      rawUpdates: this.updateBuffer,\n      tables: Object.keys(groupedUpdates)\n    };\n    this.updateBuffer = [];\n    this.iterateListeners((l) => l.tablesUpdated?.(batchedUpdate));\n  }\n\n  protected transactionReverted() {\n    // clear updates\n    this.updateBuffer = [];\n  }\n\n  handleTableUpdates(notification: UpdateNotification) {\n    // Fire updates for any change\n    this.iterateListeners((l) => l.rawTableChange?.({ ...notification }));\n\n    // Queue changes until they are flushed\n    this.updateBuffer.push(notification);\n  }\n}\n"],"mappings":";;;AAAA,SAASA,uBAAuB,EAAEC,kBAAkB,QAAQ,iBAAiB;AAC7E,SAGEC,gBAAgB,QAGX,SAAS;AAChB,SAAuBC,YAAY,QAAQ,sBAAsB;AAmCjE,OAAO,MAAMC,iBAAiB,SAASD,YAAY,CAAa;AAEhE,OAAO,MAAME,yBAAyB,SAASD,iBAAiB,CAAC;EAG/DE,WAAWA,CAAWC,OAAiC,EAAE;IACvD,KAAK,CAAC,CAAC;IAAC,KADYA,OAAiC,GAAjCA,OAAiC;IAAAC,eAAA;IAErD,IAAI,CAACC,YAAY,GAAG,EAAE;IACtBR,kBAAkB,CAAC,IAAI,CAACM,OAAO,CAACG,MAAM,EAAGC,MAAM,IAAK,IAAI,CAACC,kBAAkB,CAACD,MAAM,CAAC,CAAC;IACpFX,uBAAuB,CAAC,IAAI,CAACO,OAAO,CAACG,MAAM,EAAGG,SAAS,IAAK;MAC1D,QAAQA,SAAS;QACf;AACR;AACA;AACA;QACQ,KAAKX,gBAAgB,CAACY,QAAQ;UAC5B,IAAI,CAACC,mBAAmB,CAAC,CAAC;UAC1B;MACJ;MAEA,IAAI,CAACC,gBAAgB,CAAEC,CAAC;QAAA,IAAAC,mBAAA;QAAA,QAAAA,mBAAA,GACtBD,CAAC,CAACE,gBAAgB,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAAE,IAAA,CAAAH,CAAC,EAAoB;UACnBI,IAAI,EAAER;QACR,CAAC,CAAC;MAAA,CACJ,CAAC;IACH,CAAC,CAAC;EACJ;EAEAS,YAAYA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAACb,YAAY,CAACc,MAAM,EAAE;MAC7B;IACF;IAEA,MAAMC,cAAc,GAAG,IAAI,CAACf,YAAY,CAACgB,MAAM,CAAC,CAACC,QAA8C,EAAEf,MAAM,KAAK;MAC1G,MAAM;QAAEgB;MAAM,CAAC,GAAGhB,MAAM;MACxB,MAAMiB,WAAW,GAAGF,QAAQ,CAACC,KAAK,CAAC,KAAKD,QAAQ,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC;MAC7DC,WAAW,CAACC,IAAI,CAAClB,MAAM,CAAC;MACxB,OAAOe,QAAQ;IACjB,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,MAAMI,aAAwC,GAAG;MAC/CN,cAAc;MACdO,UAAU,EAAE,IAAI,CAACtB,YAAY;MAC7BuB,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACV,cAAc;IACpC,CAAC;IACD,IAAI,CAACf,YAAY,GAAG,EAAE;IACtB,IAAI,CAACO,gBAAgB,CAAEC,CAAC;MAAA,IAAAkB,gBAAA;MAAA,QAAAA,gBAAA,GAAKlB,CAAC,CAACmB,aAAa,cAAAD,gBAAA,uBAAfA,gBAAA,CAAAf,IAAA,CAAAH,CAAC,EAAiBa,aAAa,CAAC;IAAA,EAAC;EAChE;EAEUf,mBAAmBA,CAAA,EAAG;IAC9B;IACA,IAAI,CAACN,YAAY,GAAG,EAAE;EACxB;EAEAG,kBAAkBA,CAACyB,YAAgC,EAAE;IACnD;IACA,IAAI,CAACrB,gBAAgB,CAAEC,CAAC;MAAA,IAAAqB,iBAAA;MAAA,QAAAA,iBAAA,GAAKrB,CAAC,CAACsB,cAAc,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAAlB,IAAA,CAAAH,CAAC,EAAkB;QAAE,GAAGoB;MAAa,CAAC,CAAC;IAAA,EAAC;;IAErE;IACA,IAAI,CAAC5B,YAAY,CAACoB,IAAI,CAACQ,YAAY,CAAC;EACtC;AACF","ignoreList":[]}