"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  QuickSQLite: true,
  open: true,
  typeORMDriver: true
};
exports.typeORMDriver = exports.open = exports.QuickSQLite = void 0;
var _reactNative = require("react-native");
var _setupOpen = require("./setup-open");
var _typeOrm = require("./type-orm");
var _types = require("./types");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
if (global.__QuickSQLiteProxy == null) {
  const QuickSQLiteModule = _reactNative.NativeModules.QuickSQLite;
  if (QuickSQLiteModule == null) {
    throw new Error('Base quick-sqlite module not found. Maybe try rebuilding the app.');
  }

  // Check if we are running on-device (JSI)
  if (global.nativeCallSyncHook == null || QuickSQLiteModule.install == null) {
    throw new Error('Failed to install react-native-quick-sqlite: React Native is not running on-device. QuickSQLite can only be used when synchronous method invocations (JSI) are possible. If you are using a remote debugger (e.g. Chrome), switch to an on-device debugger (e.g. Flipper) instead.');
  }

  // Call the synchronous blocking install() function
  const result = QuickSQLiteModule.install();
  if (result !== true) {
    throw new Error(`Failed to install react-native-quick-sqlite: The native QuickSQLite Module could not be installed! Looks like something went wrong when installing JSI bindings: ${result}`);
  }

  // Check again if the constructor now exists. If not, throw an error.
  if (global.__QuickSQLiteProxy == null) {
    throw new Error('Failed to install react-native-quick-sqlite, the native initializer function does not exist. Are you trying to use QuickSQLite from different JS Runtimes?');
  }
}
const proxy = global.__QuickSQLiteProxy;
const QuickSQLite = exports.QuickSQLite = proxy;
const {
  open
} = (0, _setupOpen.setupOpen)(QuickSQLite);
exports.open = open;
const typeORMDriver = exports.typeORMDriver = (0, _typeOrm.setupTypeORMDriver)(open);
//# sourceMappingURL=index.js.map