"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransactionEvent = exports.RowUpdateType = exports.ConcurrentLockType = void 0;
/**
 * Object returned by SQL Query executions {
 *  insertId: Represent the auto-generated row id if applicable
 *  rowsAffected: Number of affected rows if result of a update query
 *  message: if status === 1, here you will find error description
 *  rows: if status is undefined or 0 this object will contain the query results
 * }
 *
 * @interface QueryResult
 */
/**
 * Column metadata
 * Describes some information about columns fetched by the query
 */
/**
 * Allows the execution of bulk of sql commands
 * inside a transaction
 * If a single query must be executed many times with different arguments, its preferred
 * to declare it a single time, and use an array of array parameters.
 */
/**
 * status: 0 or undefined for correct execution, 1 for error
 * message: if status === 1, here you will find error description
 * rowsAffected: Number of affected rows if status == 0
 */
/**
 * Result of loading a file and executing every line as a SQL command
 * Similar to BatchQueryResult
 */
let RowUpdateType = exports.RowUpdateType = /*#__PURE__*/function (RowUpdateType) {
  RowUpdateType[RowUpdateType["SQLITE_INSERT"] = 18] = "SQLITE_INSERT";
  RowUpdateType[RowUpdateType["SQLITE_DELETE"] = 9] = "SQLITE_DELETE";
  RowUpdateType[RowUpdateType["SQLITE_UPDATE"] = 23] = "SQLITE_UPDATE";
  return RowUpdateType;
}({});
let TransactionEvent = exports.TransactionEvent = /*#__PURE__*/function (TransactionEvent) {
  TransactionEvent[TransactionEvent["COMMIT"] = 0] = "COMMIT";
  TransactionEvent[TransactionEvent["ROLLBACK"] = 1] = "ROLLBACK";
  return TransactionEvent;
}({});
let ConcurrentLockType = exports.ConcurrentLockType = /*#__PURE__*/function (ConcurrentLockType) {
  ConcurrentLockType[ConcurrentLockType["READ"] = 0] = "READ";
  ConcurrentLockType[ConcurrentLockType["WRITE"] = 1] = "WRITE";
  return ConcurrentLockType;
}({});
//# sourceMappingURL=types.js.map