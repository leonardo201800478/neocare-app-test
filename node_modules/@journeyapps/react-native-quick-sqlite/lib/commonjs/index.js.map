{"version":3,"names":["_reactNative","require","_setupOpen","_typeOrm","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","global","__QuickSQLiteProxy","QuickSQLiteModule","NativeModules","QuickSQLite","Error","nativeCallSyncHook","install","result","proxy","open","setupOpen","typeORMDriver","setupTypeORMDriver"],"sources":["index.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport { ISQLite } from './types';\nimport { setupOpen } from './setup-open';\nimport { setupTypeORMDriver } from './type-orm';\n\nexport * from './types';\n\ndeclare global {\n  function nativeCallSyncHook(): unknown;\n  var __QuickSQLiteProxy: object | undefined;\n}\n\nif (global.__QuickSQLiteProxy == null) {\n  const QuickSQLiteModule = NativeModules.QuickSQLite;\n\n  if (QuickSQLiteModule == null) {\n    throw new Error('Base quick-sqlite module not found. Maybe try rebuilding the app.');\n  }\n\n  // Check if we are running on-device (JSI)\n  if (global.nativeCallSyncHook == null || QuickSQLiteModule.install == null) {\n    throw new Error(\n      'Failed to install react-native-quick-sqlite: React Native is not running on-device. QuickSQLite can only be used when synchronous method invocations (JSI) are possible. If you are using a remote debugger (e.g. Chrome), switch to an on-device debugger (e.g. Flipper) instead.'\n    );\n  }\n\n  // Call the synchronous blocking install() function\n  const result = QuickSQLiteModule.install();\n  if (result !== true) {\n    throw new Error(\n      `Failed to install react-native-quick-sqlite: The native QuickSQLite Module could not be installed! Looks like something went wrong when installing JSI bindings: ${result}`\n    );\n  }\n\n  // Check again if the constructor now exists. If not, throw an error.\n  if (global.__QuickSQLiteProxy == null) {\n    throw new Error(\n      'Failed to install react-native-quick-sqlite, the native initializer function does not exist. Are you trying to use QuickSQLite from different JS Runtimes?'\n    );\n  }\n}\n\nconst proxy = global.__QuickSQLiteProxy;\nexport const QuickSQLite = proxy as ISQLite;\n\nexport const { open } = setupOpen(QuickSQLite);\n\nexport const typeORMDriver = setupTypeORMDriver(open);\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAEA,IAAAG,MAAA,GAAAH,OAAA;AAAAI,MAAA,CAAAC,IAAA,CAAAF,MAAA,EAAAG,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAC,YAAA,EAAAJ,GAAA;EAAA,IAAAA,GAAA,IAAAK,OAAA,IAAAA,OAAA,CAAAL,GAAA,MAAAJ,MAAA,CAAAI,GAAA;EAAAH,MAAA,CAAAS,cAAA,CAAAD,OAAA,EAAAL,GAAA;IAAAO,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAZ,MAAA,CAAAI,GAAA;IAAA;EAAA;AAAA;AAOA,IAAIS,MAAM,CAACC,kBAAkB,IAAI,IAAI,EAAE;EACrC,MAAMC,iBAAiB,GAAGC,0BAAa,CAACC,WAAW;EAEnD,IAAIF,iBAAiB,IAAI,IAAI,EAAE;IAC7B,MAAM,IAAIG,KAAK,CAAC,mEAAmE,CAAC;EACtF;;EAEA;EACA,IAAIL,MAAM,CAACM,kBAAkB,IAAI,IAAI,IAAIJ,iBAAiB,CAACK,OAAO,IAAI,IAAI,EAAE;IAC1E,MAAM,IAAIF,KAAK,CACb,oRACF,CAAC;EACH;;EAEA;EACA,MAAMG,MAAM,GAAGN,iBAAiB,CAACK,OAAO,CAAC,CAAC;EAC1C,IAAIC,MAAM,KAAK,IAAI,EAAE;IACnB,MAAM,IAAIH,KAAK,CACZ,oKAAmKG,MAAO,EAC7K,CAAC;EACH;;EAEA;EACA,IAAIR,MAAM,CAACC,kBAAkB,IAAI,IAAI,EAAE;IACrC,MAAM,IAAII,KAAK,CACb,4JACF,CAAC;EACH;AACF;AAEA,MAAMI,KAAK,GAAGT,MAAM,CAACC,kBAAkB;AAChC,MAAMG,WAAW,GAAAR,OAAA,CAAAQ,WAAA,GAAGK,KAAgB;AAEpC,MAAM;EAAEC;AAAK,CAAC,GAAG,IAAAC,oBAAS,EAACP,WAAW,CAAC;AAACR,OAAA,CAAAc,IAAA,GAAAA,IAAA;AAExC,MAAME,aAAa,GAAAhB,OAAA,CAAAgB,aAAA,GAAG,IAAAC,2BAAkB,EAACH,IAAI,CAAC","ignoreList":[]}