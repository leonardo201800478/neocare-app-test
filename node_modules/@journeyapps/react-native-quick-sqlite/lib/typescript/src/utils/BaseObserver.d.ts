export interface BaseObserverInterface<T extends BaseListener> {
    registerListener(listener: Partial<T>): () => void;
}
export type BaseListener = {
    [key: string]: (...event: any) => any;
};
export declare class BaseObserver<T extends BaseListener = BaseListener> implements BaseObserverInterface<T> {
    protected listeners: Set<Partial<T>>;
    constructor();
    registerListener(listener: Partial<T>): () => void;
    iterateListeners(cb: (listener: Partial<T>) => any): void;
}
