import { BatchedUpdateCallback, TransactionEvent, UpdateCallback, UpdateNotification } from './types';
import { BaseListener, BaseObserver } from './utils/BaseObserver';
export interface DBListenerManagerOptions {
    dbName: string;
}
export interface WriteTransactionEvent {
    type: TransactionEvent;
}
export interface DBListener extends BaseListener {
    /**
     * Register a listener to be fired for any table change.
     * Changes inside write locks and transactions are reported immediately.
     */
    rawTableChange: UpdateCallback;
    /**
     * Register a listener for when table changes are persisted
     * into the DB. Changes during write transactions which are
     * rolled back are not reported.
     * Any changes during write locks are buffered and reported
     * after transaction commit and lock release.
     * Table changes are reported individually for now in order to maintain
     * API compatibility. These can be batched in future.
     */
    tablesUpdated: BatchedUpdateCallback;
    /**
     * Listener event triggered whenever a write transaction
     * is started, committed or rolled back.
     */
    writeTransaction: (event: WriteTransactionEvent) => void;
}
export declare class DBListenerManager extends BaseObserver<DBListener> {
}
export declare class DBListenerManagerInternal extends DBListenerManager {
    protected options: DBListenerManagerOptions;
    private updateBuffer;
    constructor(options: DBListenerManagerOptions);
    flushUpdates(): void;
    protected transactionReverted(): void;
    handleTableUpdates(notification: UpdateNotification): void;
}
